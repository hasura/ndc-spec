name: Release cli on github
on:
  push:

jobs:
  build-cli-binaries:
    name: build the CLI binaries
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - runner: macos-latest
            target: x86_64-apple-darwin
          - runner: macos-latest
            target: aarch64-apple-darwin
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
            rustflags: -C target-feature=+crt-static
            extension: .exe
    runs-on: ${{ matrix.runner }}
    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
      RUSTFLAGS: "-D warnings ${{ matrix.rustflags }}"
      PKG_CONFIG_ALLOW_CROSS: "1"
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          ref: v0.1.2
      - name: install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "25.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: install tools
        run: |
          rustup show
          rustup target add ${{ matrix.target }}

      - name: install other packages required
        if: matrix.linux-packages
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.linux-packages }}

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "build-${matrix.runner}" # share the cache across jobs

      - name: build the CLI
        run: |
          export RELEASE_VERSION="0.1.2"
          echo "RELEASE_VERSION = ${RELEASE_VERSION}"

          if [[ -n '${{ matrix.linker }}' ]]; then
            TARGET_SCREAMING="$(echo '${{ matrix.target }}' | tr '[:lower:]' '[:upper:]' | tr '-' '_')"
            echo "CARGO_TARGET_${TARGET_SCREAMING}_LINKER"='${{ matrix.linker }}'
            declare "CARGO_TARGET_${TARGET_SCREAMING}_LINKER"='${{ matrix.linker }}'
            export "CARGO_TARGET_${TARGET_SCREAMING}_LINKER"
          fi

          echo "Building for target: ${CARGO_BUILD_TARGET}"
          cargo build --release --package ndc-test

          mkdir -p release
          mv -v target/${{ matrix.target }}/release/ndc-test release/ndc-test-${{ matrix.target }}${{ matrix.extension }}

      - uses: actions/upload-artifact@v4
        with:
          name: ndc-test-${{ matrix.target }}${{ matrix.extension }}
          path: release
          if-no-files-found: error

  release:
    name: release to GitHub
    needs:
      - build-cli-binaries
    runs-on: ubuntu-latest
    # if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: release/artifacts
          merge-multiple: true

      - name: generate CLI manifest
        run: |
          set -evo pipefail
          ROOT="$(pwd)"

          export CLI_VERSION="v0.1.2"

          export LINUX_AMD64_SHA256=$(sha256sum ${ROOT}/release/artifacts/ndc-test-x86_64-unknown-linux-musl     | cut -f1 -d' ')
          export MACOS_AMD64_SHA256=$(sha256sum ${ROOT}/release/artifacts/ndc-test-x86_64-apple-darwin           | cut -f1 -d' ')
          export WINDOWS_AMD64_SHA256=$(sha256sum ${ROOT}/release/artifacts/ndc-test-x86_64-pc-windows-msvc.exe  | cut -f1 -d' ')
          export LINUX_ARM64_SHA256=$(sha256sum ${ROOT}/release/artifacts/ndc-test-aarch64-unknown-linux-musl    | cut -f1 -d' ')
          export MACOS_ARM64_SHA256=$(sha256sum ${ROOT}/release/artifacts/ndc-test-aarch64-apple-darwin          | cut -f1 -d' ')

      - name: Get version from tag
        id: get-version
        run: |
          echo "tagged_version=0.1.2" >> $GITHUB_OUTPUT
        shell: bash

      - name: create a draft release
        uses: ncipollo/release-action@v1
        with:
          draft: true
          tag: v${{ steps.get-version.outputs.tagged_version }}
          artifacts: release/artifacts/*
